/*
RTC => 8Bytes
    2B:Daycount
    3B:Time
    3B:Date
Sensor1 => 16Bytes
    2B:Temp
    6B:TempPeak/Avrg
    2B:Humi
    6B:HumiPeak/Avrg
Sensor2 => 16Bytes
    2B:Temp 
    6B:TempPeak/Avrg
    2B:Humi
    6B:HumiPeak/Avrg
Sensor3 => 16Bytes
    2B:Temp
    6B:TempPeak/Avrg
    2B:Humi
    6B:HumiPeak/Avrg
PWMDevcs => 3Bytes
    1B:Speed PWM1
    1B:Speed PWM2
    1B:Speed PWM3
Status => 8Bytes
    1B:Sensor(incl. Photoled)
    8B:Devices

Summary => 68Bytes
*/


#define VD_SEG_SIZE_TIME    8
#define VD_SEG_SIZE_SENS    16
#define VD_SEG_SIZE_PWM     3
#define VD_SEG_SIZE_STATUS  9

#define VD_SEG_ADDR_TIME    0
#define VD_SEG_ADDR_SENS0   VD_SEG_ADDR_TIME + VD SEG_SIZE_TIME
#define VD_SEG_ADDR_SENS1   VD_SEG_ADDR_SENS0 + VD SEG_SIZE_SENS
#define VD_SEG_ADDR_SENS2   VD_SEG_ADDR_SENS1 + VD SEG_SIZE_SENS
#define VD_SEG_ADDR_PWM     VD_SEG_ADDR_SENS2 + VD SEG_SIZE_SENS
#define VD_SEG_ADDR_STATUS  VD_SEG_ADDR_PWM   + VD_SEG_SIZE_PWM

#define VD_OVERALL_SIZE     VD_SEG_ADDR_STATUS + VD_SEG_SIZE_STATUS
//Time Seg
#define VD_TIME_DAYS_UI16   0
#define VD_TIME_HOUR        2
#define VD_TIME_MINUTE      3
#define VD_TIME_SECOND      4
#define VD_TIME_DATE        5
#define VD_TIME_MONTH       6
#define VD_TIME_YEAR        7
//Sens Seg
#define VD_SENS_TEMP_UI16   0
#define VD_SENS_TMIN_UI16   2
#define VD_SENS_TAVG_UI16   4
#define VD_SENS_TMAX_UI16   6
#define VD_SENS_HUMI_UI16   8
#define VD_SENS_HMIN_UI16   2
#define VD_SENS_HAVG_UI16   4
#define VD_SENS_HMAX_UI16   6
//Pwm Seg
#define VD_PWM0_CSPEED      0
#define VD_PWM1_CSPEED      1
#define VD_PWM2_CSPEED      2
//Status Seg
#define VD_STATUS_SENSOR    0
#define VD_STATUS_DEVC0     1
#define VD_STATUS_DEVC1     2
#define VD_STATUS_DEVC2     3
#define VD_STATUS_DEVC3     4
#define VD_STATUS_DEVC4     5
#define VD_STATUS_DEVC5     6
#define VD_STATUS_DEVC6     7
#define VD_STATUS_DEVC7     8

uint16_t conv8to16(uint8_t *ptr)
{
    uint16_t ui16 = *(ptr++);
    ui16 |= (uint16_t)(*ptr) << 8;
    return ui16;
}

void conv16to8(uint16_t ui16, uint8_t *ptr)
{
    *(ptr++) = (ui16 & 0xF);
    *ptr = (ui16>>8);
}

uint8_t volatile_data[VD_OVERALL_SIZE];




